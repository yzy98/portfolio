---
import "@fontsource/lora";
import "@fontsource/roboto";

import "../styles/global.css";

import { ClientRouter } from "astro:transitions";

;

type Props = {
  title: string;
  description: string;
  image?: string;
};

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/nano.png" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="icon" type="image/x-icon" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ClientRouter />

<script>
import type { TransitionBeforeSwapEvent } from "astro:transitions/client";

document.addEventListener("astro:before-swap", e =>
  [
    ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
      "link[as=\"font\"]",
    ),
  ].forEach(link => link.remove()));
</script>

<script is:inline>
function init() {
  preloadTheme();
  onScroll();
  initSlideEnterToArticle();
  slideEnter();
  // initLogoMountedAnimation();
  initLogoHoverAnimation();

  const backToTop = document.getElementById("back-to-top");
  backToTop?.addEventListener("click", event => scrollToTop(event));

  const backToPrev = document.getElementById("back-to-prev");
  backToPrev?.addEventListener("click", () => window.history.back());

  const lightThemeButton = document.getElementById("light-theme-button");
  lightThemeButton?.addEventListener("click", () => {
    localStorage.setItem("theme", "light");
    toggleTheme(false);
  });

  const darkThemeButton = document.getElementById("dark-theme-button");
  darkThemeButton?.addEventListener("click", () => {
    localStorage.setItem("theme", "dark");
    toggleTheme(true);
  });

  const systemThemeButton = document.getElementById("system-theme-button");
  systemThemeButton?.addEventListener("click", () => {
    localStorage.setItem("theme", "system");
    toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
  });

  window.matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (event) => {
      if (localStorage.theme === "system") {
        toggleTheme(event.matches);
      }
    });

  document.addEventListener("scroll", onScroll);
}

function initSlideEnterToArticle() {
  const article = document.querySelector(".slide-enter-article");
  if (!article)
    return;

  const children = Array.from(article.children);
  children.forEach((child) => {
    child.classList.add("slide-enter");
  });
}

function slideEnter() {
  const slideEnterElements = document.querySelectorAll(".slide-enter");
  slideEnterElements.forEach((element, index) => {
    element.style.setProperty("--stagger", index + 1);
  });
}

// function initLogoMountedAnimation() {
//   const animatedLogo = document.querySelector(".animated-logo");
//   if (!animatedLogo)
//     return;

//   animatedLogo.classList.remove("animate-draw");
//   void animatedLogo.offsetHeight;
//   animatedLogo.classList.add("animate-draw");

//   animatedLogo.addEventListener("animationend", () => {
//     animatedLogo.classList.remove("animate-draw");
//   });
// }

function initLogoHoverAnimation() {
  const logoTrigger = document.querySelector(".logo-trigger");
  const animatedLogo = document.querySelector(".animated-logo");

  if (logoTrigger && animatedLogo) {
    logoTrigger.addEventListener("mouseenter", () => {
      // Ignore if already animating
      if (animatedLogo.classList.contains("animate-draw-reverse")) {
        return;
      }

      animatedLogo.classList.remove("animate-draw-reverse");
      void animatedLogo.offsetHeight;
      animatedLogo.classList.add("animate-draw-reverse");
    });

    animatedLogo.addEventListener("animationend", () => {
      animatedLogo.classList.remove("animate-draw-reverse");
    });
  }
}

function onScroll() {
  if (window.scrollY > 0) {
    document.documentElement.classList.add("scrolled");
  }
  else {
    document.documentElement.classList.remove("scrolled");
  }
}

function scrollToTop(event) {
  event.preventDefault();
  window.scrollTo({
    top: 0,
    behavior: "smooth",
  });
}

function toggleTheme(dark) {
  const css = document.createElement("style");

  css.appendChild(
    document.createTextNode(
      `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
    ),
  );

  document.head.appendChild(css);

  if (dark) {
    document.documentElement.classList.add("dark");
  }
  else {
    document.documentElement.classList.remove("dark");
  }

  void window.getComputedStyle(css).opacity;
  document.head.removeChild(css);
}

function preloadTheme() {
  const userTheme = localStorage.theme;

  if (userTheme === "light" || userTheme === "dark") {
    toggleTheme(userTheme === "dark");
  }
  else {
    toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
  }
}

document.addEventListener("DOMContentLoaded", () => init());
document.addEventListener("astro:after-swap", () => init());
preloadTheme();
</script>
